<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
						http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
						http://www.springframework.org/schema/context
						http://www.springframework.org/schema/context/spring-context-3.2.xsd
						http://www.springframework.org/schema/tx
						http://www.springframework.org/schema/tx/spring-tx-3.2.xsd">
	<!-- 1. 数据源 : DriverManagerDataSource -->
	<bean id="dataSource"
		class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="com.mysql.jdbc.Driver" />
		<property name="url" value="jdbc:mysql://192.168.0.179/Alan_Test" />
		<property name="username" value="root" />
		<property name="password" value="storm" />
	</bean>
	<!-- 配置sqlSessionFactory，SqlSessionFactoryBean是用来产生sqlSessionFactory的 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- 加载mybatis的全局配置文件，放在classpath下的mybatis文件夹中了 -->
		<property name="configLocation" value="mybatis-config.xml" />
		<!-- 加载数据源，使用上面配置好的数据源 -->
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!-- MapperFactoryBean：根据mapper接口生成的代理对象 spring是通过MapperFactoryBean来创建代理对象的，看下面的配置： -->
	<!--<bean id="userMapper" class="org.mybatis.spring.mapper.MapperFactoryBean"> 
		<property name="mapperInterface" value="com.steven.mapper.UserDao" /> <property 
		name="sqlSessionFactory" ref="sqlSessionFactory" /> </bean> -->



	<!-- mapper批量扫描包，从mapper包中扫描出mapper接口，自动创建代理对象并且在spring容器中注册 -->
	<!-- <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer"> <property 
		name="basePackage" value="com.steven.mapper" /> <property name="sqlSessionFactoryBeanName" 
		value="sqlSessionFactory" /> </bean> -->

	<bean id="userDao" class="com.steven.hello.UserDaoImpl">
		<property name="sqlSessionFactory" ref="sqlSessionFactory" />
	</bean>


	<!-- 4. 事务管理 : DataSourceTransactionManager -->
	<bean id="txManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<!-- 5. 使用声明式事务 -->
	<tx:annotation-driven transaction-manager="txManager" />
</beans>